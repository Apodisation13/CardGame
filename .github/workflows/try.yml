name: ci-cd

on:
  pull_request:
    branches: [ dev, master ]
  push:
    branches: [ dev, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  MODE: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Lint with flake8
        run: cd backend && flake8 .

      - name: Check imports ordering with isort
        run: cd backend && isort -c .

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@v1.2.1
        with:
          name: "google.json"
          json: ${{ secrets.GOOGLE_SECRET_JSON }}
          dir: "backend/"

      - name: download_db
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          GOOGLE_DRIVE_FILE_ID: ${{ secrets.GOOGLE_DRIVE_FILE_ID }}
          SERVICE_ACCOUNT_FILE: ${{ secrets.SERVICE_ACCOUNT_FILE }}
        run: | 
          cd backend 
          ls -a
          python manage.py database

      - name: test with Pytest
        run: cd backend && pytest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: secret

  build:
    if: github.event_name == 'push'
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: v0.6.0

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.MODE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'master' && 'prod' || 'dev' }}  # we can't use env here :(
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Upload docker-compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_SERVER }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/*"
          target: "/srv/cardgame/backend/${{ env.MODE }}"
          strip_components: 1

      - name: Connect via SSH, pull, restart
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_SERVER }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /srv/cardgame/backend/${{ env.MODE }}

            export REGISTRY=${{ env.REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export MODE=${{ env.MODE }}
            export DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
                    
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_HOST=postgres" >> .env
            echo "POSTGRES_PORT=5432" >> .env
            echo "DEBUG=True" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.DOMAIN_NAME }}" >> .env

            declare -a arr=(".env" "docker-compose.yml" "nginx.conf")
            for f in "${arr[@]}"; do chown :developer $f && chmod 660 $f; done

            echo "${{ github.token }}" | docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.MODE }}

            docker-compose stop api
            docker-compose rm -f api
            docker-compose up -d

            for image in $(docker images | grep none | awk '{print $3}' | cat); do docker rmi "$image"; done
